generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id         Int        @id @default(autoincrement())
  title      String
  description String
  img        String
  screenshots Screenshot[]
  videos      VideoSlider[]
  createdAt  DateTime   @default(now())
  releaseDate DateTime
  platforms  String[]   // misal: ["PC", "Mobile"]
  categories GameCategory[]
  requirements SystemRequirement[]
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now())

  games      GameCategory[]
}

model GameCategory {
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([gameId, categoryId])
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  image     String
  date      DateTime
  excerpt   String
  content   String
  createdAt DateTime @default(now())
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model SystemRequirement {
  id              Int     @id @default(autoincrement())
  gameId          Int
  type            String  // "Minimum" atau "Recommended"
  os              String
  processor       String
  memory          String
  graphics        String
  storage         String
  additionalNotes String?

  game            Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Screenshot {
  id      Int    @id @default(autoincrement())
  gameId  Int
  image   String
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model VideoSlider {
  id      Int    @id @default(autoincrement())
  gameId  Int
  url     String
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
