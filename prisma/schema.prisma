generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          String   @id @default(uuid()) @db.VarChar
  title       String   @db.VarChar
  description String
  img         String   @db.VarChar
  screenshots Screenshot[]
  videos      VideoSlider[]
  createdAt  DateTime   @default(now())
  releaseDate DateTime
  platforms  String[]   // misal: ["PC", "Mobile"]
  requirements Json
  categories GameCategory[]
  jumbotrons  Jumbotron[]
}

model Category {
  id     String        @id @default(uuid()) @db.VarChar
  name       String    @unique @db.VarChar
  createdAt  DateTime  @default(now())

  games      GameCategory[]
}

model GameCategory {
  id         String  @id @default(uuid()) @db.VarChar
  gameId     String  @db.VarChar
  categoryId String  @db.VarChar

  game      Game     @relation(fields: [gameId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model News {
  id        String    @id @default(uuid()) @db.VarChar
  title     String    @db.VarChar
  image     String    @db.VarChar
  date      DateTime
  excerpt   String
  content   String
  createdAt DateTime @default(now())
}
model Admin {
  id        String   @id @default(uuid()) @db.VarChar
  username  String   @unique  @db.VarChar
  password  String
  role      String   @default("admin") // "admin" | "superadmin"
  createdAt DateTime @default(now())
}


model Screenshot {
  id      String  @id @default(uuid()) @db.VarChar
  gameId  String  @db.VarChar
  image   String  @db.VarChar
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model VideoSlider {
  id      String @id @default(uuid()) @db.VarChar
  gameId  String @db.VarChar
  url     String
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Jumbotron {
  id        String   @id @default(uuid()) @db.VarChar
  gameId    String      @unique @db.VarChar
  game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
}


model About {
  id       String @id @default(uuid()) @db.VarChar
  title       String @db.VarChar
  tagline     String
  description String
  vision      String?
  mission     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  images      AboutImage[]
  teamMembers TeamMember[]
}

enum ImageType {
  BANNER
  DOKUMENTASI
  LAMPIRAN
}

model AboutImage {
  id        String @id @default(uuid()) @db.VarChar
  aboutId   String @db.VarChar
  url       String
  altText   String?
  type      ImageType
  createdAt DateTime @default(now())

  about     About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}


model TeamMember {
  id        String @id @default(uuid()) @db.VarChar
  aboutId   String @db.VarChar
  name      String @db.VarChar
  role      String
  photo     String? @db.VarChar
  linkedin  String?
  github    String?
  createdAt DateTime @default(now())

  about     About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}
